{"version":3,"file":"bloc.es5.js","sources":["../lib/src/errors/event-stream-closed.error.ts","../lib/src/bloc-observer.ts","../lib/src/bloc.ts","../lib/src/transition.ts"],"sourcesContent":["export class EventStreamClosedError extends Error {\n  constructor() {\n    super('cannot add new events after calling close')\n  }\n}\n","import { Bloc, Transition } from '../bloc'\n\nexport class BlocObserver {\n  onEvent(_bloc: Bloc<any, any>, _event: any) {\n    return\n  }\n\n  onTransition(_bloc: Bloc<any, any>, _transition: Transition<any, any>) {\n    return\n  }\n\n  onError(_bloc: Bloc<any, any>, _error: any) {\n    return\n  }\n}\n","import { Observable, Subject, EMPTY, Subscription } from 'rxjs'\nimport { catchError, concatMap, map } from 'rxjs/operators'\nimport { BlocObserver, EventStreamClosedError, Transition } from '../bloc'\n\nexport type NextFunction<Event, State> = (value: Event) => Observable<Transition<Event, State>>\n\nexport abstract class Bloc<Event, State> extends Observable<State> {\n  constructor(private _state: State) {\n    super()\n    this.stateSubject = new Subject()\n    this.bindStateSubject()\n  }\n\n  static observer: BlocObserver = new BlocObserver()\n  private emitted: boolean = false\n  private eventSubject = new Subject<Event>()\n  private stateSubject: Subject<State>\n  private transitionSubscription: Subscription = Subscription.EMPTY\n\n  /**\n   * Returns the current state of the bloc.\n   *\n   * @readonly\n   * @type {State}\n   * @memberof Bloc\n   */\n  get state(): State {\n    return this._state\n  }\n\n  /**\n   * Adds a Subscription to the bloc's state stream.\n   *\n   * @param {(value: State) => void} onData\n   * @param {(((onError: any) => any) | undefined)} [onError]\n   * @param {((() => any) | undefined)} [onDone]\n   * @return {*}  {Subscription}\n   * @memberof Bloc\n   */\n  listen(\n    onData: (value: State) => void,\n    onError?: ((onError: any) => any) | undefined,\n    onDone?: (() => any) | undefined\n  ): Subscription {\n    return this.stateSubject.subscribe(onData, onError, onDone)\n  }\n\n  /**\n   * Notifies the bloc of a new event which triggers `mapEventToState`.\n   *\n   * @param {Event} event\n   * @memberof Bloc\n   */\n  add(event: Event): void {\n    try {\n      if (this.eventSubject.isStopped) {\n        throw new EventStreamClosedError()\n      }\n      this.onEvent(event)\n      this.eventSubject.next(event)\n    } catch (error) {\n      this.onError(error)\n    }\n  }\n\n  /**\n   * Called whenever an event is added to the bloc.\n   *\n   * @param {Event} event\n   * @memberof Bloc\n   */\n  onEvent(event: Event): void {\n    Bloc.observer.onEvent(this, event)\n  }\n\n  /**\n   * Transforms the events along with a `NextFunction` into\n   * an `Observable<Transition>`.\n   * Events that should be processed by `mapEventToState` need to be passed to\n   * the `next`.\n   * By default `concatMap` is used to ensure all events are processed in\n   * the order in which they are received.\n   * You can override `transformEvents` for advanced usage in order to\n   * manipulate the frequency and specificity with which `mapEventToState` is\n   * called as well as which `events` are processed.\n   *\n   * @param {Observable<Event>} events\n   * @param {NextFunction<Event, State>} next\n   * @return {*}  {Observable<Transition<Event, State>>}\n   * @memberof Bloc\n   */\n  transformEvents(\n    events: Observable<Event>,\n    next: NextFunction<Event, State>\n  ): Observable<Transition<Event, State>> {\n    return events.pipe(concatMap(next))\n  }\n\n  /**\n   * Must be implemented when a class extends `Bloc`.\n   * Called whenever an event is added to the bloc and\n   * is responsible for converting incoming events into outgoing states.\n   *\n   * @abstract\n   * @param {Event} event\n   * @return {*}  {AsyncIterableIterator<State>}\n   * @memberof Bloc\n   */\n  abstract mapEventToState(event: Event): AsyncIterableIterator<State>\n\n  /**\n   * Transforms the `Observable<Transition>` into a new `Observable<Transition>`.\n   * By default `transformTransitions` returns the incoming `Observable<Transition>`.\n   * You can override `transformTransitions` for advanced usage in order to\n   * manipulate the frequency and specificity at which `transitions`\n   * (state changes) occur.\n   *\n   * @param {Observable<Transition<Event, State>>} transitions\n   * @return {*}  {Observable<Transition<Event, State>>}\n   * @memberof Bloc\n   */\n  transformTransitions(\n    transitions: Observable<Transition<Event, State>>\n  ): Observable<Transition<Event, State>> {\n    return transitions\n  }\n\n  /**\n   * Called whenever a `transition` occurs with the given `transition`.\n   * A `transition` occurs when a new `event` is added and `mapEventToState` executed.\n   * `onTransition` is called before a bloc's state has been updated.\n   *\n   * @param {Transition<Event, State>} transition\n   * @memberof Bloc\n   */\n  onTransition(transition: Transition<Event, State>): void {\n    Bloc.observer.onTransition(this, transition)\n  }\n\n  /**\n   * Called whenever an `error` is thrown within `mapEventToState`.\n   * By default all errors will be ignored and bloc functionality will be unaffected.\n   *\n   * @param {*} error\n   * @memberof Bloc\n   */\n  onError(error: any): void {\n    Bloc.observer.onError(this, error)\n  }\n\n  /**\n   * This method should be called when a `Bloc` is no longer needed.\n   * Disposes the resources held by the bloc which means the `Bloc` will\n   * no longer process new events after `close` has been called.\n   *\n   * @memberof Bloc\n   */\n  close(): void {\n    this.stateSubject.complete()\n    this.eventSubject.complete()\n    this.transitionSubscription.unsubscribe()\n  }\n\n  private bindStateSubject(): void {\n    this.transitionSubscription = this.transformTransitions(\n      this.transformEvents(this.eventSubject, (event: Event) => {\n        return asyncToObservable(this.mapEventToState(event)).pipe(\n          map((nextState: State, _: number) => {\n            return new Transition(this.state, event, nextState)\n          }),\n          catchError(error => {\n            this.onError(error)\n            return EMPTY\n          })\n        )\n      })\n    ).subscribe((transition: Transition<Event, State>) => {\n      if (transition.nextState == this.state && this.emitted) return\n      try {\n        this.onTransition(transition)\n        this._state = transition.nextState\n        this.stateSubject.next(transition.nextState)\n      } catch (error) {\n        this.onError(error)\n      }\n      this.emitted = true\n    })\n  }\n}\n\nfunction asyncToObservable<T>(iterable: AsyncIterableIterator<T>): Observable<T> {\n  return new Observable<T>(\n    observer =>\n      void (async () => {\n        try {\n          for await (const item of iterable) {\n            if (observer.closed) return\n            observer.next(item)\n          }\n          observer.complete()\n        } catch (e) {\n          observer.error(e)\n        }\n      })()\n  )\n}\n","export class Transition<Event, State> {\n  constructor(public state: State, public event: Event, public nextState: State) {}\n}\n"],"names":["tslib_1.__extends","Bloc","tslib_1.__asyncValues"],"mappings":"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"}