(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define(['exports', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global.bloc = {}),global.rxjs,global.rxjs.operators));
}(this, (function (exports,rxjs,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    var EventStreamClosedError = /** @class */ (function (_super) {
        __extends(EventStreamClosedError, _super);
        function EventStreamClosedError() {
            return _super.call(this, 'cannot add new events after calling close') || this;
        }
        return EventStreamClosedError;
    }(Error));

    var BlocObserver = /** @class */ (function () {
        function BlocObserver() {
        }
        BlocObserver.prototype.onEvent = function (_bloc, _event) {
            return;
        };
        BlocObserver.prototype.onTransition = function (_bloc, _transition) {
            return;
        };
        BlocObserver.prototype.onError = function (_bloc, _error) {
            return;
        };
        return BlocObserver;
    }());

    var Bloc$$1 = /** @class */ (function (_super) {
        __extends(Bloc$$1, _super);
        function Bloc$$1(_state) {
            var _this = _super.call(this) || this;
            _this._state = _state;
            _this.emitted = false;
            _this.eventSubject = new rxjs.Subject();
            _this.transitionSubscription = rxjs.Subscription.EMPTY;
            _this.stateSubject = new rxjs.Subject();
            _this.bindStateSubject();
            return _this;
        }
        Object.defineProperty(Bloc$$1.prototype, "state", {
            /**
             * Returns the current state of the bloc.
             *
             * @readonly
             * @type {State}
             * @memberof Bloc
             */
            get: function () {
                return this._state;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Adds a Subscription to the bloc's state stream.
         *
         * @param {(value: State) => void} onData
         * @param {(((onError: any) => any) | undefined)} [onError]
         * @param {((() => any) | undefined)} [onDone]
         * @return {*}  {Subscription}
         * @memberof Bloc
         */
        Bloc$$1.prototype.listen = function (onData, onError, onDone) {
            return this.stateSubject.subscribe(onData, onError, onDone);
        };
        /**
         * Notifies the bloc of a new event which triggers `mapEventToState`.
         *
         * @param {Event} event
         * @memberof Bloc
         */
        Bloc$$1.prototype.add = function (event) {
            try {
                if (this.eventSubject.isStopped) {
                    throw new EventStreamClosedError();
                }
                this.onEvent(event);
                this.eventSubject.next(event);
            }
            catch (error) {
                this.onError(error);
            }
        };
        /**
         * Called whenever an event is added to the bloc.
         *
         * @param {Event} event
         * @memberof Bloc
         */
        Bloc$$1.prototype.onEvent = function (event) {
            Bloc$$1.observer.onEvent(this, event);
        };
        /**
         * Transforms the events along with a `NextFunction` into
         * an `Observable<Transition>`.
         * Events that should be processed by `mapEventToState` need to be passed to
         * the `next`.
         * By default `concatMap` is used to ensure all events are processed in
         * the order in which they are received.
         * You can override `transformEvents` for advanced usage in order to
         * manipulate the frequency and specificity with which `mapEventToState` is
         * called as well as which `events` are processed.
         *
         * @param {Observable<Event>} events
         * @param {NextFunction<Event, State>} next
         * @return {*}  {Observable<Transition<Event, State>>}
         * @memberof Bloc
         */
        Bloc$$1.prototype.transformEvents = function (events, next) {
            return events.pipe(operators.concatMap(next));
        };
        /**
         * Transforms the `Observable<Transition>` into a new `Observable<Transition>`.
         * By default `transformTransitions` returns the incoming `Observable<Transition>`.
         * You can override `transformTransitions` for advanced usage in order to
         * manipulate the frequency and specificity at which `transitions`
         * (state changes) occur.
         *
         * @param {Observable<Transition<Event, State>>} transitions
         * @return {*}  {Observable<Transition<Event, State>>}
         * @memberof Bloc
         */
        Bloc$$1.prototype.transformTransitions = function (transitions) {
            return transitions;
        };
        /**
         * Called whenever a `transition` occurs with the given `transition`.
         * A `transition` occurs when a new `event` is added and `mapEventToState` executed.
         * `onTransition` is called before a bloc's state has been updated.
         *
         * @param {Transition<Event, State>} transition
         * @memberof Bloc
         */
        Bloc$$1.prototype.onTransition = function (transition) {
            Bloc$$1.observer.onTransition(this, transition);
        };
        /**
         * Called whenever an `error` is thrown within `mapEventToState`.
         * By default all errors will be ignored and bloc functionality will be unaffected.
         *
         * @param {*} error
         * @memberof Bloc
         */
        Bloc$$1.prototype.onError = function (error) {
            Bloc$$1.observer.onError(this, error);
        };
        /**
         * This method should be called when a `Bloc` is no longer needed.
         * Disposes the resources held by the bloc which means the `Bloc` will
         * no longer process new events after `close` has been called.
         *
         * @memberof Bloc
         */
        Bloc$$1.prototype.close = function () {
            this.stateSubject.complete();
            this.eventSubject.complete();
            this.transitionSubscription.unsubscribe();
        };
        Bloc$$1.prototype.bindStateSubject = function () {
            var _this = this;
            this.transitionSubscription = this.transformTransitions(this.transformEvents(this.eventSubject, function (event) {
                return asyncToObservable(_this.mapEventToState(event)).pipe(operators.map(function (nextState, _) {
                    return new Transition(_this.state, event, nextState);
                }), operators.catchError(function (error) {
                    _this.onError(error);
                    return rxjs.EMPTY;
                }));
            })).subscribe(function (transition) {
                if (transition.nextState == _this.state && _this.emitted)
                    return;
                try {
                    _this.onTransition(transition);
                    _this._state = transition.nextState;
                    _this.stateSubject.next(transition.nextState);
                }
                catch (error) {
                    _this.onError(error);
                }
                _this.emitted = true;
            });
        };
        Bloc$$1.observer = new BlocObserver();
        return Bloc$$1;
    }(rxjs.Observable));
    function asyncToObservable(iterable) {
        var _this = this;
        return new rxjs.Observable(function (observer) {
            return void (function () { return __awaiter(_this, void 0, void 0, function () {
                var iterable_1, iterable_1_1, item, e_1_1, e_2;
                var e_1, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 13, , 14]);
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 6, 7, 12]);
                            iterable_1 = __asyncValues(iterable);
                            _b.label = 2;
                        case 2: return [4 /*yield*/, iterable_1.next()];
                        case 3:
                            if (!(iterable_1_1 = _b.sent(), !iterable_1_1.done)) return [3 /*break*/, 5];
                            item = iterable_1_1.value;
                            if (observer.closed)
                                return [2 /*return*/];
                            observer.next(item);
                            _b.label = 4;
                        case 4: return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 12];
                        case 6:
                            e_1_1 = _b.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 12];
                        case 7:
                            _b.trys.push([7, , 10, 11]);
                            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) return [3 /*break*/, 9];
                            return [4 /*yield*/, _a.call(iterable_1)];
                        case 8:
                            _b.sent();
                            _b.label = 9;
                        case 9: return [3 /*break*/, 11];
                        case 10:
                            if (e_1) throw e_1.error;
                            return [7 /*endfinally*/];
                        case 11: return [7 /*endfinally*/];
                        case 12:
                            observer.complete();
                            return [3 /*break*/, 14];
                        case 13:
                            e_2 = _b.sent();
                            observer.error(e_2);
                            return [3 /*break*/, 14];
                        case 14: return [2 /*return*/];
                    }
                });
            }); })();
        });
    }

    var Transition = /** @class */ (function () {
        function Transition(state, event, nextState) {
            this.state = state;
            this.event = event;
            this.nextState = nextState;
        }
        return Transition;
    }());

    exports.EventStreamClosedError = EventStreamClosedError;
    exports.BlocObserver = BlocObserver;
    exports.Bloc = Bloc$$1;
    exports.Transition = Transition;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bloc.umd.js.map
